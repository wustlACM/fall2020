{"version":3,"sources":["img/avatar.png","constants.ts","utils.ts","components/MatrixTextType/MatrixTextType.tsx","components/MatrixTextType/index.tsx","pages/About/ParticleSimulation.tsx","pages/About/Banner.tsx","pages/About/About.tsx","pages/About/index.tsx","pages/NotFound/NotFound.tsx","pages/NotFound/index.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ALPHANUMERICSYMBOLS","maskRandString","origString","typedChars","allowableCharacters","origLength","length","randString","c","charAt","Math","floor","random","substring","concat","MatrixTextType","className","color","variant","text","seconds","keySpeed","max","useState","numDemasked","setNumDemasked","curText","setCurText","setTimeout","useEffect","Typography","ParticleSimulation","style","canvasStyle","height","width","Object","assign","useTheme","canvas","context","dpi","canvasElementRef","createRef","LINK_THRESHOLD","document","documentElement","clientWidth","particles","couleurs","fix_dpi","style_height","getComputedStyle","getPropertyValue","slice","style_width","setAttribute","Particle","x","y","speedx","speedy","this","round","dirX","dirY","j","particleActuelle","yd","xd","d","sqrt","beginPath","globalAlpha","globalCompositeOperation","lineWidth","moveTo","lineTo","strokeStyle","lineCap","stroke","closePath","window","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","current","getContext","err","console","error","devicePixelRatio","scale","log","initSimulation","i","particle","push","animate","clearRect","move","ref","RAND_ICONS","Banner","theme","getRandomColor","r","g","b","toString","backgroundImage","Avatar","backgroundPosition","backgroundRepeat","backgroundSize","top","left","position","Grid","container","direction","spacing","alignItems","justify","item","Container","xs","sm","marginBottom","padding","maxHeight","overflowY","map","Chip","key","size","icon","label","clickable","margin","backgroundColor","Button","fullWidth","onClick","open","About","NotFound","AppTheme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","body2","fontWeight","subtitle2","action","disabledBackground","disabled","App","ThemeProvider","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","basename","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.19d6995b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.668c6873.png\";","// Site Pages\nexport const ABOUT = \"about\";\nexport const ABOUT_PAGE = \"/\";\nexport const PAGES = [ABOUT];\nexport const LINKS = [ABOUT_PAGE];\n// Constants\nexport const EMPTY_PLACEHOLDER = \"\";\nexport const PLACEHOLDER_MEDIA = \"http://placekitten.com/300/300\";\nexport const ALPHANUMERIC =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\nexport const ALPHANUMERICSYMBOLS =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789`~!@#$%^&*()_+[]{};':\\\",./<>?\\\\|\";\n","import { ALPHANUMERIC, ALPHANUMERICSYMBOLS } from \"src/constants\";\n\n// Get json from response\nconst getJson = (res: any) => {\n  if (res.ok) {\n    let res_json = res.json();\n    return res_json;\n  } else {\n    console.error(`Response code: ${res.status}`);\n    return null;\n  }\n};\n\n// Get text from response\nconst getText = (res: any) => {\n  let res_text = res.text();\n  if (res.ok) {\n    return res_text;\n  } else {\n    console.error(`Response code: ${res.status}`);\n    return null;\n  }\n};\n\n// Log to error any errors in fetch instead of alerts\n// which will not show up when debugging in microapps env\n// and is highly disruptive for user-flow on web\nconst catchErr = (err: any) => {\n  console.error(\"Error: \" + err);\n};\n\n// fetch response from url\nconst fetchRes = async (reqType: string, data: any, url: string) => {\n  if (data == null) {\n    return await fetch(url);\n  } else {\n    return await fetch(url, {\n      method: reqType,\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\",\n      body: JSON.stringify(data),\n    });\n  }\n};\n\n// fetch json response from url\nexport const fetchJson = async (reqType: string, data: any, url: string) => {\n  return fetchRes(reqType, data, url)\n    .then((res) => getJson(res))\n    .catch((err) => catchErr(err));\n};\n\n// fetch text response from url\nexport const fetchText = async (reqType: string, data: any, url: string) => {\n  return fetchRes(reqType, data, url)\n    .then((res) => getText(res))\n    .catch((err) => catchErr(err));\n};\n\n// Grab url parameter\nexport const urlGetParam = (param: string): string | null => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(param);\n};\n\n// Decode json from encoded url parameter\nexport const urlGetJson = (param: string) => {\n  const rawEncoded = urlGetParam(param);\n  if (rawEncoded) {\n    const decodedJsonString = decodeURIComponent(rawEncoded);\n    if (decodedJsonString) {\n      return JSON.parse(decodedJsonString);\n    }\n  }\n};\n\n// Generate random 'matrix-style' string from given original\n// preserving an initial starting number of characters\nexport const maskRandString = (\n  origString: string,\n  typedChars: number,\n  allowableCharacters = ALPHANUMERICSYMBOLS\n) => {\n  const origLength = origString.length;\n  let randString = \"\";\n  for (const c of origString) {\n    if (c !== \" \") {\n      randString += allowableCharacters.charAt(\n        Math.floor(Math.random() * allowableCharacters.length)\n      );\n    } else randString += \" \";\n  }\n  return origString\n    .substring(0, typedChars)\n    .concat(\"\", randString.substring(typedChars, origLength));\n};\n","import React, { useEffect, useState } from \"react\";\nimport { Typography } from \"@material-ui/core\";\nimport { maskRandString } from \"src/utils\";\nimport \"src/css/App.css\";\n\nfunction MatrixTextType({\n  className,\n  color,\n  variant,\n  text,\n  seconds,\n}: {\n  className?: string;\n  color: \"primary\" | \"secondary\" | \"textPrimary\" | \"textSecondary\" | undefined;\n  variant:\n    | \"button\"\n    | \"caption\"\n    | \"h1\"\n    | \"h2\"\n    | \"h3\"\n    | \"h4\"\n    | \"h5\"\n    | \"h6\"\n    | \"inherit\"\n    | \"subtitle1\"\n    | \"subtitle2\"\n    | \"body1\"\n    | \"body2\"\n    | \"overline\"\n    | \"srOnly\"\n    | undefined;\n  text: string;\n  seconds?: number;\n}) {\n  // Increment text demasked\n  const animateText = () => {\n    if (numDemasked < text.length) setNumDemasked(numDemasked + 1);\n  };\n\n  // Type a character every 300ms\n  const keySpeed = seconds ? Math.max(5, (seconds / text.length) * 1000) : 80;\n\n  const [numDemasked, setNumDemasked] = useState<number>(0);\n  const [curText, setCurText] = useState<string>(maskRandString(text, 0));\n\n  setTimeout(animateText, keySpeed);\n\n  useEffect(() => {\n    setCurText(maskRandString(text, numDemasked));\n  }, [numDemasked]);\n\n  return (\n    <div className=\"MatrixTextType\">\n      <Typography className={className} color={color} variant={variant}>\n        {curText}\n      </Typography>\n    </div>\n  );\n}\n\nexport default MatrixTextType;\n","import MatrixTextType from \"./MatrixTextType\";\nexport default MatrixTextType;\n","import React, { useEffect, useState, createRef } from \"react\";\nimport { Container, Button, Grid } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport \"src/css/App.css\";\ndeclare const window: any;\n\n/* Code Adapted from: [TODO: Cite link] */\nfunction ParticleSimulation({ style }: { style?: React.CSSProperties }) {\n  const canvasStyle: React.CSSProperties = {\n    height: \"100vh\",\n    width: \"100%\",\n  };\n\n  if (style) {\n    Object.assign(canvasStyle, style);\n  }\n\n  const theme = useTheme();\n  const canvasElementRef = createRef<HTMLCanvasElement>();\n  let canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D | null,\n    dpi: number;\n  const particle_count = 70;\n  const EPSILON = 0.001;\n  const LINK_THRESHOLD = document.documentElement.clientWidth * 0.1;\n  const particles: any[] = [];\n  const couleurs = [\"#1a6800\", \"#005757\", \"#c61c3d\", \"#df9d19\"];\n\n  const initSimulation = () => {\n    window.requestAnimFrame = (function () {\n      return (\n        window.requestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.oRequestAnimationFrame ||\n        window.msRequestAnimationFrame ||\n        function (callback: () => void) {\n          window.setTimeout(callback, 1000 / 60);\n        }\n      );\n    })();\n\n    try {\n      canvas = canvasElementRef.current as HTMLCanvasElement;\n      context = canvas.getContext(\"2d\");\n    } catch (err) {\n      console.error(err);\n      return;\n    }\n\n    //get DPI\n    dpi = window.devicePixelRatio || 1;\n    if (context) context.scale(dpi, dpi);\n    console.log(dpi);\n  };\n\n  const fix_dpi = () => {\n    //get CSS height\n    //the + prefix casts it to an integer\n    //the slice method gets rid of \"px\"\n    let style_height = +getComputedStyle(canvas)\n      .getPropertyValue(\"height\")\n      .slice(0, -2);\n    let style_width = +getComputedStyle(canvas)\n      .getPropertyValue(\"width\")\n      .slice(0, -2);\n\n    //scale the canvas\n    canvas.setAttribute(\"height\", `${style_height * dpi}`);\n    canvas.setAttribute(\"width\", `${style_width * dpi}`);\n  };\n\n  class Particle {\n    x: number;\n    y: number;\n    color: string;\n    speedx: number;\n    speedy: number;\n    constructor() {\n      this.x = Math.floor(\n        Math.random() *\n          (+getComputedStyle(canvas).getPropertyValue(\"width\").slice(0, -2) *\n            dpi)\n      );\n      this.y = Math.floor(\n        Math.random() *\n          (+getComputedStyle(canvas).getPropertyValue(\"height\").slice(0, -2) *\n            dpi)\n      );\n      this.color = couleurs[Math.floor(Math.random() * couleurs.length)];\n      this.speedx = Math.round(Math.random() * 201 + 0) / 100;\n      this.speedy = Math.round(Math.random() * 201 + 0) / 100;\n\n      const dirX = Math.random() * 2 - 1;\n      const dirY = Math.random() * 2 - 1;\n\n      if (dirX < 0) this.speedx *= -1;\n      if (dirY < 0) this.speedy *= -1;\n    }\n\n    move() {\n      if (!context) return;\n\n      this.x = this.x + this.speedx;\n      this.y = this.y + this.speedy;\n\n      if (this.x <= 0) {\n        this.speedx *= -1;\n      }\n      if (this.x >= canvas.width) {\n        this.speedx *= -1;\n      }\n      if (this.y <= 0) {\n        this.speedy *= -1;\n      }\n      if (this.y >= canvas.height) {\n        this.speedy *= -1;\n      }\n\n      for (var j = 0; j < particle_count; j++) {\n        var particleActuelle = particles[j];\n        const yd = particleActuelle.y - this.y,\n          xd = particleActuelle.x - this.x,\n          d = Math.sqrt(xd * xd + yd * yd);\n\n        if (d < LINK_THRESHOLD && d > EPSILON) {\n          context.beginPath();\n          context.globalAlpha = (LINK_THRESHOLD - d) / LINK_THRESHOLD;\n          context.globalCompositeOperation = \"destination-over\";\n          context.lineWidth = 1;\n          context.moveTo(this.x, this.y);\n          context.lineTo(particleActuelle.x, particleActuelle.y);\n          context.strokeStyle = this.color;\n          context.lineCap = \"round\";\n          context.stroke();\n          context.closePath();\n        }\n      }\n    }\n  }\n\n  const animate = () => {\n    if (!context) return;\n    fix_dpi();\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    for (var i = 0; i < particle_count; i++) {\n      particles[i].move();\n    }\n    window.requestAnimFrame(animate);\n  };\n\n  useEffect(() => {\n    initSimulation();\n    if (context) {\n      for (let i = 0; i < particle_count; i++) {\n        fix_dpi();\n        const particle: any = new Particle();\n        particles.push(particle);\n      }\n      animate();\n    }\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasElementRef}\n      className=\"particle-simulation\"\n      style={canvasStyle}\n    />\n  );\n}\n\nexport default ParticleSimulation;\n","import React, { useEffect, useState } from \"react\";\nimport { Container, Button, Grid, Typography, Chip } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport PetsIcon from \"@material-ui/icons/Pets\";\nimport BugReportIcon from \"@material-ui/icons/BugReport\";\nimport AdbIcon from \"@material-ui/icons/Adb\";\nimport AppleIcon from \"@material-ui/icons/Apple\";\nimport CakeIcon from \"@material-ui/icons/Cake\";\nimport Avatar from \"src/img/avatar.png\";\nimport MatrixTextType from \"src/components/MatrixTextType\";\nimport ParticleSimulation from \"./ParticleSimulation\";\nimport \"src/css/App.css\";\n\nconst RAND_ICONS = [\n  <FaceIcon />,\n  <PetsIcon />,\n  <BugReportIcon />,\n  <AdbIcon />,\n  <AppleIcon />,\n  <CakeIcon />,\n];\n\nfunction Banner() {\n  const theme = useTheme();\n\n  const HEADER_TITLE = \"WashU ACM\";\n  const HEADER_SUBTITLE =\n    \"We are the Washington University in St. Louis' chapter of ACM, the Association for Computing Machinery. Every semester, we organize all sorts of events: Tuesday/Thursday Tech Talks, Programming Competition, Intership Panel, Course Registration Discussion, and Fireside Chat with CSE department faculties. We welcome every student with interest in computing or computer science. Come and join us to get notified of our news and upcoming events!\";\n  const LIST_OF_FUN_STUFF_WE_DO = [\n    \"Fireside Chat\",\n    \"Internship Panel\",\n    \"Board Games\",\n    \"Game Jam\",\n    \"Pretend to be Ducks\",\n  ];\n\n  const getRandomColor = () => {\n    const r = Math.floor(Math.random() * 100 + 100);\n    const g = Math.floor(Math.random() * 100 + 100);\n    const b = Math.floor(Math.random() * 100 + 100);\n    return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`;\n  };\n\n  const redirectSignup = () => {\n    window.open(\"https://forms.gle/bu3n1JQdP1WQew6W6\", \"_blank\");\n  };\n\n  return (\n    <div\n      className=\"About-Banner debug\"\n      style={{\n        height: \"100vh\",\n        width: \"100%\",\n        backgroundImage: `url(${Avatar})`,\n        backgroundPosition: \"left\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n      }}\n    >\n      <div\n        style={{\n          backgroundImage:\n            \"radial-gradient(rgba(0, 12, 24, 0.8) 70%, rgba(0, 12, 24, 0.95))\",\n          height: \"100%\",\n          width: \"100%\",\n          top: \"0px\",\n          left: \"0px\",\n          position: \"absolute\",\n        }}\n      />\n      <ParticleSimulation\n        style={{ top: \"0px\", left: \"0px\", position: \"absolute\" }}\n      />\n      <Grid\n        container\n        style={{\n          height: \"100%\",\n          width: \"100%\",\n          top: \"0px\",\n          left: \"0px\",\n          position: \"absolute\",\n        }}\n        direction=\"column\"\n        spacing={0}\n        alignItems=\"center\"\n        justify=\"center\"\n      >\n        <Grid item>\n          <Container>\n            <Grid\n              item\n              container\n              direction=\"row\"\n              spacing={0}\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item xs={12} sm className=\"debug\">\n                <Grid container direction=\"column\">\n                  <Grid\n                    item\n                    className=\"debug\"\n                    style={{\n                      marginBottom: theme.spacing(1),\n                      padding: theme.spacing(1),\n                    }}\n                  >\n                    <MatrixTextType\n                      className=\"monospaceRoboto\"\n                      seconds={2}\n                      color=\"textSecondary\"\n                      variant=\"h1\"\n                      text={HEADER_TITLE}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    className=\"debug\"\n                    style={{\n                      marginBottom: theme.spacing(1),\n                      padding: theme.spacing(1),\n                      maxHeight: \"200px\",\n                      overflowY: \"auto\",\n                    }}\n                  >\n                    <MatrixTextType\n                      className=\"monospaceRoboto\"\n                      seconds={3}\n                      color=\"textSecondary\"\n                      variant=\"body1\"\n                      text={HEADER_SUBTITLE}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    container\n                    direction=\"row\"\n                    justify=\"flex-start\"\n                    alignItems=\"center\"\n                  >\n                    <Grid item xs={12} sm={9}>\n                      {LIST_OF_FUN_STUFF_WE_DO.map(\n                        (text: string, i: number) => (\n                          <Chip\n                            key={`skill-chip-${i}`}\n                            size=\"small\"\n                            icon={\n                              RAND_ICONS[\n                                Math.floor(Math.random() * RAND_ICONS.length)\n                              ]\n                            }\n                            label={text}\n                            clickable\n                            color=\"primary\"\n                            style={{\n                              margin: \"4px\",\n                              color: \"#FFFFFF\",\n                              backgroundColor: getRandomColor(),\n                            }}\n                          />\n                        )\n                      )}\n                    </Grid>\n                    <Grid\n                      item\n                      xs={12}\n                      sm={3}\n                      className=\"debug\"\n                      style={{ marginBottom: theme.spacing(1) }}\n                    >\n                      <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth={true}\n                        onClick={redirectSignup}\n                      >\n                        Sign Me Up! >\n                      </Button>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Container>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Banner from \"./Banner\";\nimport LifeSimulation from \"./LifeSimulation\";\nimport \"src/css/App.css\";\n\nfunction About() {\n  const theme = useTheme();\n\n  return (\n    <div className=\"About\">\n      <Banner />\n      {/*\n      <div\n        style={{\n          height: \"100vw\",\n          width: \"100%\",\n        }}\n      >\n        <LifeSimulation />\n      </div>\n      */}\n    </div>\n  );\n}\n\nexport default About;\n","import About from \"./About\";\nexport default About;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1> 404 - Page Not Found </h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import NotFound from \"./NotFound\";\nexport default NotFound;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst PRIMARY_COLOR = \"#5E87A7\";\nconst SECONDARY_COLOR = \"#58585A\";\nconst SUCCESS_COLOR = \"#00E676\";\nconst ERROR_COLOR = \"#F44336\";\n\nconst WHITE_TEXT_COLOR = \"#FFFFFF\";\nconst WHITE_BACKGROUND_COLOR = \"#FFFFFF\";\n\nexport const DEFAULT_TEXT_COLOR = \"#000000\";\n\n// https://material-ui.com/customization/theming/#createmuitheme-options-args-theme\n// Customize our app-specific theme\nconst AppTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: PRIMARY_COLOR,\n      contrastText: WHITE_TEXT_COLOR,\n    },\n    secondary: {\n      main: SECONDARY_COLOR,\n      contrastText: WHITE_TEXT_COLOR,\n    },\n    text: {\n      primary: DEFAULT_TEXT_COLOR,\n      secondary: WHITE_TEXT_COLOR,\n    },\n  },\n  typography: {\n    body2: {\n      fontWeight: 800,\n    },\n    subtitle2: {\n      color: SECONDARY_COLOR,\n    },\n  },\n});\n\n// Moving 'success' and 'error' into primary/secondary to allow\n// usage with majority of components (typescript + @material-ui constrain)\nexport const ErrorTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: SUCCESS_COLOR,\n      contrastText: WHITE_TEXT_COLOR,\n    },\n    secondary: {\n      main: ERROR_COLOR,\n      contrastText: WHITE_TEXT_COLOR,\n    },\n  },\n});\n\n// Inverse of ErrorTheme with text-color and backgrouund color inverted\nexport const LightErrorTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: WHITE_BACKGROUND_COLOR,\n      contrastText: SUCCESS_COLOR,\n    },\n    secondary: {\n      main: WHITE_BACKGROUND_COLOR,\n      contrastText: ERROR_COLOR,\n    },\n  },\n});\n\n// Button theming for header\nexport const HeaderButtonTheme = createMuiTheme({\n  palette: {\n    action: {\n      disabledBackground: \"rgba(255, 255, 255, 0.5)\",\n      disabled: \"black\",\n    },\n  },\n});\n\nexport default AppTheme;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport About from \"src/pages/About\";\nimport NotFound from \"src/pages/NotFound\";\nimport Header from \"src/components/Header\";\nimport { PAGES, LINKS, ABOUT } from \"src/constants\";\nimport AppTheme from \"src/theme\";\nimport { Container } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport \"src/css/App.css\";\n\nfunction App() {\n  return (\n    <main>\n      <div className=\"App\">\n        <ThemeProvider theme={AppTheme}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <About />\n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </ThemeProvider>\n      </div>\n    </main>\n  );\n}\n\nexport default App; // Exports the 'App' function as a React DOM component\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter\n    basename={process.env.NODE_ENV === \"production\" ? \"/fall2020\" : undefined}\n  >\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}