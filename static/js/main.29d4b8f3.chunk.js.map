{"version":3,"sources":["img/avatar.png","pages/About/Banner.tsx","pages/About/About.tsx","pages/About/index.tsx","pages/NotFound/NotFound.tsx","pages/NotFound/index.tsx","theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","RAND_ICONS","Banner","theme","useTheme","getRandomColor","r","Math","floor","random","g","b","toString","className","style","marginTop","spacing","marginBottom","Grid","container","direction","alignItems","item","padding","src","Avatar","borderRadius","height","width","minHeight","minWidth","maxHeight","maxWidth","objectFit","xs","sm","Typography","variant","Button","color","onClick","alert","Divider","justify","map","text","i","Chip","key","size","icon","length","label","clickable","margin","backgroundColor","About","NotFound","AppTheme","createMuiTheme","palette","primary","main","contrastText","secondary","typography","body2","fontWeight","subtitle2","action","disabledBackground","disabled","App","ThemeProvider","Container","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.29d4b8f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.668c6873.png\";","import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Typography, Divider, Chip } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport PetsIcon from '@material-ui/icons/Pets';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport AdbIcon from '@material-ui/icons/Adb';\nimport AppleIcon from '@material-ui/icons/Apple';\nimport CakeIcon from '@material-ui/icons/Cake';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Avatar from \"src/img/avatar.png\";\nimport \"src/css/App.css\";\n\nconst RAND_ICONS = [<FaceIcon/>, <PetsIcon/>, <BugReportIcon/>, <AdbIcon/>, <AppleIcon/>, <CakeIcon/>];\n\nfunction Banner() {\n  const theme = useTheme();\n\n  const HEADER_TITLE = \"WashU ACM\";\n  const HEADER_SUBTITLE = \"We are the Washington University in St. Louis' chapter of ACM, the Association for Computing Machinery.\";\n  const LIST_OF_FUN_STUFF_WE_DO = [\n    \"Fireside Chat\",\n    \"Internship Panel\",\n    \"Board Games\",\n    \"Game Jam\",\n    \"Pretend to be Ducks\",\n  ];\n\n  const getRandomColor = () => {\n    const r = Math.floor(Math.random()*100+100);\n    const g = Math.floor(Math.random()*100+100);\n    const b = Math.floor(Math.random()*100+100);\n    return `#${r.toString(16)}${g.toString(16)}${b.toString(16)}`;\n  };\n\n  const redirectSignup = () => {\n    alert(\"Redirect to Google Forms for signup\");\n  };\n\n  return (\n    <div\n      className=\"About-Banner\"\n      style={{ marginTop: `${theme.spacing(4)}px`, marginBottom: `${theme.spacing(4)}px`}}\n    >\n      <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n        <Grid item className=\"debug\" style={{ padding: theme.spacing(1) }}>\n          <img\n            src={Avatar}\n            style={{\n              borderRadius: \"50%\",\n              height: \"20vw\",\n              width: \"20vw\",\n              minHeight: \"96px\",\n              minWidth: \"96px\",\n              maxHeight: \"240px\",\n              maxWidth: \"240px\",\n              objectFit: \"cover\",\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} sm className=\"debug\">\n          <Grid container direction=\"column\">\n            <Grid\n              item\n              className=\"debug\"\n              style={{\n                marginBottom: theme.spacing(1),\n                padding: theme.spacing(1),\n              }}\n            >\n              <Typography variant=\"h3\">{HEADER_TITLE}</Typography>\n            </Grid>\n            <Grid\n              item\n              className=\"debug\"\n              style={{\n                marginBottom: theme.spacing(1),\n                padding: theme.spacing(1),\n              }}\n            >\n              <Typography variant=\"body1\">{HEADER_SUBTITLE}</Typography>\n            </Grid>\n            <Grid item className=\"debug\" style={{marginBottom: theme.spacing(1)}}>\n              <Button variant=\"contained\" color=\"primary\" onClick={redirectSignup}>Sign Me Up! ></Button>\n            </Grid>\n            <Divider />\n            <Grid item container direction=\"row\" justify=\"flex-start\">\n              <Grid item xs={12} sm={8}>\n                {LIST_OF_FUN_STUFF_WE_DO.map((text: string, i: number) => (\n                  <Chip\n                    key={`skill-chip-${i}`}\n                    size=\"small\"\n                    icon={RAND_ICONS[Math.floor(Math.random()*RAND_ICONS.length)]}\n                    label={text}\n                    clickable\n                    color=\"primary\"\n                    style={{ margin: \"4px\", color: \"#FFFFFF\", backgroundColor: getRandomColor() }}\n                  />\n                ))}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport { Button, Grid, Typography, Divider, Chip } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport Banner from \"./Banner\";\nimport \"src/css/App.css\";\n\nfunction About() {\n  const theme = useTheme();\n\n  return (\n    <div\n      className=\"About\"\n      style={{ marginTop: `${theme.spacing(4)}px` }}\n    >\n      <Banner />\n      <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\n        <Grid item xs={3} className=\"debug\" style={{height: \"100vh\"}}>\n          <p> Side Bar Links </p>\n          <p> Link to discord </p>\n        </Grid>\n        <Grid item xs={9} className=\"debug\" style={{height: \"100vh\", width: \"100%\"}}>\n          <p> Main Content </p>\n          <p> Feed of activity posts </p>\n          <p> Scrape from Twitter? Do we have a Twitter acc? </p>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default About;\n","import About from \"./About\";\nexport default About;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1> 404 - Page Not Found </h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import NotFound from \"./NotFound\";\nexport default NotFound;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst PRIMARY_COLOR = \"#5E87A7\";\nconst SECONDARY_COLOR = \"#58585A\";\nconst SUCCESS_COLOR = \"#00E676\";\nconst ERROR_COLOR = \"#F44336\";\n\nconst WHITE_TEXT_COLOR = \"#FFFFFF\";\nconst WHITE_BACKGROUND_COLOR = \"#FFFFFF\";\n\nexport const DEFAULT_TEXT_COLOR = \"#000000\";\n\n// https://material-ui.com/customization/theming/#createmuitheme-options-args-theme\n// Customize our app-specific theme\nconst AppTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: PRIMARY_COLOR,\n      contrastText: WHITE_TEXT_COLOR,\n    },\n    secondary: {\n      main: SECONDARY_COLOR,\n      contrastText: WHITE_TEXT_COLOR,\n    },\n  },\n  typography: {\n    body2: {\n      fontWeight: 800,\n    },\n    subtitle2: {\n      color: SECONDARY_COLOR,\n    },\n  },\n});\n\n// Moving 'success' and 'error' into primary/secondary to allow\n// usage with majority of components (typescript + @material-ui constrain)\nexport const ErrorTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: SUCCESS_COLOR,\n      contrastText: WHITE_TEXT_COLOR,\n    },\n    secondary: {\n      main: ERROR_COLOR,\n      contrastText: WHITE_TEXT_COLOR,\n    },\n  },\n});\n\n// Inverse of ErrorTheme with text-color and backgrouund color inverted\nexport const LightErrorTheme = createMuiTheme({\n  palette: {\n    primary: {\n      main: WHITE_BACKGROUND_COLOR,\n      contrastText: SUCCESS_COLOR,\n    },\n    secondary: {\n      main: WHITE_BACKGROUND_COLOR,\n      contrastText: ERROR_COLOR,\n    },\n  },\n});\n\n// Button theming for header\nexport const HeaderButtonTheme = createMuiTheme({\n  palette: {\n    action: {\n      disabledBackground: \"rgba(255, 255, 255, 0.5)\",\n      disabled: \"black\",\n    },\n  },\n});\n\nexport default AppTheme;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport About from \"src/pages/About\";\nimport NotFound from \"src/pages/NotFound\";\nimport Header from \"src/components/Header\";\nimport { PAGES, LINKS, ABOUT } from \"src/constants\";\nimport AppTheme from \"src/theme\";\nimport { Container } from \"@material-ui/core\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport \"src/css/App.css\";\n\nfunction App() {\n  return (\n    <main>\n      <div className=\"App\">\n        <ThemeProvider theme={AppTheme}>\n          <Container>\n            <Switch>\n              <Route path=\"/\" exact>\n                <About />\n              </Route>\n              <Route component={NotFound} />\n            </Switch>\n          </Container>\n        </ThemeProvider>\n      </div>\n    </main>\n  );\n}\n\nexport default App; // Exports the 'App' function as a React DOM component\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter\n    basename={process.env.NODE_ENV == \"production\" ? \"/fall2020\" : undefined}\n  >\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}